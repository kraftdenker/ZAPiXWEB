/*
  ______         _____ _______   ____          ________ ____  
 |___  /   /\   |  __ \_   _\ \ / /\ \        / /  ____|  _ \ 
    / /   /  \  | |__) || |  \ V /  \ \  /\  / /| |__  | |_) |
   / /   / /\ \ |  ___/ | |   > <    \ \/  \/ / |  __| |  _ < 
  / /__ / ____ \| |    _| |_ / . \    \  /\  /  | |____| |_) |
 /_____/_/    \_\_|   |_____/_/ \_\    \/  \/   |______|____/ 
				                      ZAPiX Web
W H A T S A P P W E B   E X T R A C T O R						

ZAPiXWEB WhatsApp Extractor - 4 CHROME, FIREFOX, EDGE, OPERA 
(It also works offline for Browser extractions)

Script Name: SPIZAPIXWEB.js
Version: 2.0
Revised Date: 23/06/24

Description: A script that extracts throught Whatsapp WEB data records.
Technique described in paper:
Soares, A. (2022). WhatsApp Web Client Live Forensics Technique. In Proceedings of the 8th International Conference on Information Systems Security and Privacy - ICISSP, ISBN 978-989-758-553-1, pages 629-636. DOI: 10.5220/0011006400003120

Copyright: 2021 Alberto Magno <alberto.magno@gmail.com> 
URL: https://github.com/kraftdenker/cellebrite-UFEDPA-scripts

Manual: Copy and paste all this code into browser console + ENTER. 
Follow the commands in console window.
In Firefox, you have to manually type "allow paste" into the console to enable pasting.

---> (FOLLOWING INSTRUCTIONS FOR DESKTOP TECHNIQUE IS NOW DEPRECATED - META CHANGED DESKTOP RUNTIME TO DOTNET APP) 
WhatsApp Desktop  - Electron (For this whatsapp version, it only works online): 
-----------------------------------------------------------------

- ChangeLog -
v1 		- [05-18-21]: Wrote original code
v1.2	- [09-27-21]: Command to extract one or more chats.
v1.3	- [10-08-21]: Correct chat extraction
v1.4	- [12-03-21]: Change extraction to full support multiple devices
v1.5	- [02-21-22]: Hash, new decryption code (using vendor module ligsignal)
v1.5.1	- [08-31-22]: Adjust in which DOM element to grab the current chat name
v1.6	- [08-31-22]: Adaptation for use with Electron (Whatsapp Desktop App)
v1.7	- [01-04-23]: Adaption to new quotedMsg structure.
v1.8	- [03-01-23]: Adjust grabbing the current chat name
v1.9	- [07-26-23]: Adjust grabbing the current user account id.
v1.10	- [02-29-24]: function ZAPiX._internal_getChatByName getting chatname also using new field 'formattedTitle'
v2.0	- [06-23-24]: Code adaptions to new secutiry directives enabled by Meta. All included libraries no more need. All code using only meta dependencies. 
Author: alberto.magno@gmail.com (https://github.com/kraftdenker)  _
*/

//-------------------------------
//ZAPIX INCLUDE
//-------------------------------
window.ZAPiX = {};
window._ZAPiX = {};

window.ZAPiX._serializeRawObj = (obj) => {
    if (obj && obj.toJSON) {
        return obj.toJSON();
    }
    return {}
};

window.ZAPiX._lastDigest = undefined;
window.ZAPiX._statusTextnode = undefined;
window.ZAPiX._zip = undefined;
window.ZAPiX._injectedStatusNode = undefined;
window.ZAPiX._injectedHeaderNode = undefined;
// --- Tables
window.ZAPiX._decodeZapMedia = {
    "image": "WhatsApp Image Keys",
    "sticker": "WhatsApp Image Keys",
    "video": "WhatsApp Video Keys",
    "audio": "WhatsApp Audio Keys",
    "document": "WhatsApp Document Keys",
    "image/webp": "WhatsApp Image Keys",
    "image/jpeg": "WhatsApp Image Keys",
    "image/png": "WhatsApp Image Keys",
    "video/mp4": "WhatsApp Video Keys",
    "audio/aac": "WhatsApp Audio Keys",
    "audio/ogg": "WhatsApp Audio Keys",
    "audio/wav": "WhatsApp Audio Keys",
	"ptt": "WhatsApp Audio Keys"
}

window.ZAPiX._mediaTypes = new Set();

window.ZAPiX._fileExtensions = JSON.parse('{"audio/aac": ".aac","application/x-abiword": ".abw","application/octet-stream": ".abw","video/x-msvideo": ".avi","application/vnd.amazon.ebook": ".azw","application/octet-stream": ".bin","image/bmp": ".bmp","application/x-bzip": ".bz","application/x-bzip2":".bz2","application/x-csh": ".csh","text/css": ".css","text/csv": ".csv","application/msword": ".doc","application/vnd.openxmlformats-officedocument.wordprocessingml.document": ".docx","application/vnd.ms-fontobject": ".eot","application/epub+zip": ".epub","video/x-flv": ".flv","image/gif": ".gif","text/html": ".htm","text/html": ".html","image/x-icon": ".ico","text/calendar": ".ics","application/java-archive": ".jar","image/jpeg": ".jpeg","text/javascript": ".js","application/json": ".json","audio/midi": ".midi","audio/x-midi": ".midi","video/x-matroska": ".mkv","audio/mpeg": ".mp3","audio/mp3": ".mp3","video/mpeg": ".mpeg","application/vnd.apple.installer+xml": ".mpkg","application/vnd.oasis.opendocument.presentation": ".odp","application/vnd.oasis.opendocument.spreadsheet": ".ods","application/vnd.oasis.opendocument.text": ".odt","audio/ogg": ".oga","audio/ogg; codecs=opus": ".opus","video/ogg": ".ogv","application/ogg": ".ogx","font/otf": ".otf","image/png": ".png","application/pdf": ".pdf","application/vnd.ms-powerpoint": ".ppt","application/vnd.openxmlformats-officedocument.presentationml.presentation": ".pptx","application/x-rar-compressed": ".rar","application/rtf": ".rtf","application/x-sh": ".sh","image/svg+xml": ".svg","application/x-shockwave-flash": ".swf","application/x-tar": ".tar","image/tiff": ".tiff","application/typescript": ".ts","font/ttf": ".ttf","text/plain": ".txt","text/x-vcard": ".vcf","application/vnd.visio": ".vsd","audio/wav": ".wav","audio/webm": ".weba","video/webm": ".webm","image/webp": ".webp","font/woff": ".woff","font/woff2": ".woff2","application/xhtml+xml": ".xhtml","application/vnd.ms-excel": ".xls","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ".xlsx","application/xml": ".xml","text/xml": ".xml","application/vnd.mozilla.xul+xml": ".xul","application/zip": ".zip","application/x-zip-compressed": ".zip","video/3gpp": ".3gp","audio/3gpp": ".3gp","video/3gpp2": ".3g2","audio/3gpp2": ".3g2","application/x-7z-compressed": ".7z","application/vnd.google-earth.kmz": ".kmz","video/mp4":".mp4","undef": ".undf", "undefined":".undf"}');

window.ZAPiX._zapix_header = '     _|_|_|   _|_|_|     |_|_|	\n    _|        _|  _|       _|	\n      _|_|    _|_|_|       _|	\n         _|   _|           _|	\n    _|_|_|    _|         _|_|_|	\n	                      ZAPiX Web\nW H A T S A P P W E B  E X T R A C T O R';

window.ZAPiX._logo = '';

// META includes
const fflate = require("fflate");
const msgHelper = require("WAWebMsgGetters");
const contactHelper = require("WAWebContactGetters");

const contactCollection = (require("WAWebContactCollection")).ContactCollection;
const chatCollection = (require("WAWebChatCollection")).ChatCollection;
const profilePicThumbCollection = (require("WAWebProfilePicThumbCollection")).ProfilePicThumbCollection;
const userAccountData = require("WAWebUserPrefsMeUser");

window.ZAPiX._zipFiles = {};

function addFile2Zip(fileName, payload) {
    window.ZAPiX._zipFiles[fileName] = payload;
}
// ------UTILS functions

var blobfy = function (obj){
	const str = JSON.stringify(obj);
	const bytes = new TextEncoder().encode(str);
	//const blob = new Blob([bytes], {    type: "application/json;charset=utf-8"});
	return bytes;

}
function base64ToArrayBuffer(base64) {
    var binary_string = window.atob(base64);
    var len = binary_string.length;
    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
}

function isElectron() {
    // Renderer process
    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
        return true;
    }

    // Main process
    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {
        return true;
    }

    // Detect the user agent when the `nodeIntegration` option is set to true
    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
        return true;
    }

    return false;
}


var b64toBlob = (b64Data, contentType='', sliceSize=512) => {
  const byteCharacters = atob(b64Data);
  const byteArrays = [];

  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);

    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  const blob = new Blob(byteArrays, {type: contentType});
  return blob;
}

window.ZAPiX._serializeRawObj = (obj) => {
    if (obj && obj.toJSON) {
        return obj.toJSON();
    }
    return {}
};

/**
 * Serializes a chat object
 *
 * @param rawChat Chat object
 * @returns {{}}
 */

window.ZAPiX._serializeChatObj = (obj) => {
    if (obj == undefined) {
        return null;
    }
    return Object.assign(window.ZAPiX._serializeRawObj(obj), {
        id: obj.id._serialized,
        kind: obj.kind,
        isGroup: obj.isGroup,
        formattedTitle: obj.formattedTitle,
        contact: obj['contact'] ? window.ZAPiX._serializeContactObj(obj['contact']) : null,
        groupMetadata: obj["groupMetadata"] ? window.ZAPiX._serializeRawObj(obj["groupMetadata"]) : null,
        presence: obj["presence"] ? window.ZAPiX._serializeRawObj(obj["presence"]) : null,
        msgs: null
    });
};

window.ZAPiX._serializeContactObj = (obj) => {
    if (obj == undefined) {
        return null;
    }
    return Object.assign(window.ZAPiX._serializeRawObj(obj), {
        id: obj.id._serialized,
        formattedName: obj.formattedName,
        isHighLevelVerified: obj.isHighLevelVerified,
        isMe: obj.isMe,
        isMyContact: obj.isMyContact,
        isPSA: obj.isPSA,
        isUser: obj.isUser,
        isVerified: obj.isVerified,
        isWAContact: obj.isWAContact,
        profilePicThumbObj: obj.profilePicThumb ? ZAPiX._serializeProfilePicThumb(obj.profilePicThumb) : {},
        statusMute: obj.statusMute,
        msgs: null
    });
};


window.ZAPiX._serializeMessageObj = (obj) => {
    if (obj == undefined) {
        return null;
    }
    const _chat = obj['chat'] ? ZAPiX._serializeChatObj(obj['chat']) : {};
    if (obj.quotedMsg) obj.quotedMsgObj;
    return Object.assign(window.ZAPiX._serializeRawObj(obj), {
        id: obj.id._serialized,
        from: obj.from._serialized,
        quotedParticipant: obj.quotedParticipant ? obj.quotedParticipant._serialized ? obj.quotedParticipant._serialized : undefined : undefined,
        author: obj.author ? obj.author._serialized ? obj.author._serialized : undefined : undefined,
        chatId: obj.chatId ? obj.chatId._serialized ? obj.chatId._serialized : undefined : undefined,
        to: obj.to ? obj.to._serialized ? obj.to._serialized : undefined : undefined,
        fromMe: obj.id.fromMe,
        sender: obj["senderObj"] ? ZAPiX._serializeContactObj(obj["senderObj"]) : null,
        timestamp: obj["t"],
        content: obj["body"],
        isGroupMsg: obj.isGroupMsg,
        isLink: obj.isLink,
        isMMS: obj.isMMS,
        isMedia: obj.isMedia,
        isNotification: obj.isNotification,
        isPSA: obj.isPSA,
        type: obj.type,
        chat: _chat,
        isOnline: _chat.isOnline,
        lastSeen: _chat.lastSeen,
        chatId: obj.id.remote,
        quotedMsgObj: window.ZAPiX._serializeMessageObj(obj['_quotedMsgObj']),
        mediaData: window.ZAPiX._serializeRawObj(obj['mediaData']),
        reply: body => window.ZAPiX.reply(_chat.id._serialized, body, obj)
    });
};

window.ZAPiX._serializeNumberStatusObj = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign({}, {
        id: obj.jid,
        status: obj.status,
        isBusiness: (obj.biz === true),
        canReceiveMessage: (obj.status === 200)
    });
};

window.ZAPiX._serializeProfilePicThumb = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign({}, {
        eurl: obj.eurl,
        id: obj.id,
        img: obj.img,
        imgFull: obj.imgFull,
        raw: obj.raw,
        tag: obj.tag
    });
}


// Main tasks functions
window.ZAPiX._getUser = function (){
	return (userAccountData.getMe()._serialized).replaceAll('\"','').replaceAll(":","_"); 
	//return (localStorage.getItem("last-wid-md")).replaceAll('\"','').replaceAll(":","_");
}

window.ZAPiX._downloadFile2Array = async function (url) {
    if (!url) return false;
    //console.log(url);
    const response = await fetch(url);
    const ab = await response.arrayBuffer();
    return btoa(new Uint8Array(ab).reduce((data, byte) => data + String.fromCharCode(byte), ''));
};


window.ZAPiX._getProfilesPics = async function(contacts){
    for(var i = 0; i < contacts.length; i++) {
		var obj = contacts[i];
		window.ZAPiX._statusTextnode.data = "ProfilePic "+obj.id+"-"+i+"/"+contacts.length;
		console.log("Reading data id: "+obj.id);
        picArray = profilePicThumbCollection._models.filter((p)=>p.__x_id._serialized === obj.id);
        if (picArray.length > 0){
            //console.log('URL:');
            url = picArray[0].__x_imgFull;
            //console.log(url);
            if (typeof url !== 'undefined' && url !== null) {
                try{
                    const response = await fetch(url);
                    const data = await response.arrayBuffer();
                    addFile2Zip("Avatar "+obj.id+".jpg", [new Uint8Array(data),{ level:0}]);
                    console.log("Avatar "+obj.id+" saved");
                } catch (error) {
                    console.error("Avatar "+obj.id+" NOT saved - ", error);
                }
            }
        }
		
	}
}

window.ZAPiX._downloadMediaFile = async function(msg) {
    
	console.log("Download media file");
	//console.log(msg);
    
    var url = msgHelper.getDeprecatedMms3Url(msg);
	var dec_media_withpad = base64ToArrayBuffer(await window.ZAPiX._downloadFile2Array(url));
	//console.log(dec_media_withpad);
	var dec_media = dec_media_withpad.slice(0,dec_media_withpad.byteLength-10);
	//console.log(dec_media);
    var mediaType = msgHelper.getType(msg);
	window.ZAPiX._mediaTypes.add(mediaType);
	var mediakey = msgHelper.getMediaKey(msg);
	console.log(window.ZAPiX._decodeZapMedia[mediaType]);
    var mediaKeyExpanded = 'notExpanded'
    mediaHkdf = require("WACryptoHkdf");
	//console.log(mediakey);
    var mediaKeyExpanded = await mediaHkdf.extractAndExpand(base64ToArrayBuffer(mediakey), window.ZAPiX._decodeZapMedia[mediaType], 112);
    //mediaKeyExpanded.then((data)=> expandedKey = data);
    //console.log(mediaKeyExpanded);
	var ivd = new Uint8Array(mediaKeyExpanded.slice(0, 16));
	//console.log('IV:'+ivd+" bytelength:"+ivd.byteLength);
    var cipherKey = new Uint8Array(mediaKeyExpanded.slice(16,48));
	//console.log('CypherKey:'+cipherKey+" bytelength:"+cipherKey.byteLength);
	var decAESkey = await crypto.subtle.importKey('raw',cipherKey,{ name: 'AES-CBC' },false, ['decrypt']);
	//console.log('decAESKey:');
    //console.log(decAESkey);
    var decoded = await crypto.subtle.decrypt({name:'AES-CBC', iv:new Uint8Array(ivd)}, decAESkey, dec_media);
	//console.log('decrypted:');
	//console.log(decoded);
	if (decoded.byteLength == 0)
	{
		console.log('Media file NOT decrypted');
	} else {
        console.log('Saving:','Attachment '+msgHelper.getId(msg)+window.ZAPiX._fileExtensions[msgHelper.getMimetype(msg)]);
		addFile2Zip('Attachment '+msgHelper.getId(msg)+window.ZAPiX._fileExtensions[msgHelper.getMimetype(msg)], [new Uint8Array(decoded),{ level:0}]);  
		console.log('Media file decrypted');
	}
};

window.ZAPiX._getUserContacts =  function () {
    return contactCollection._models.filter((contact) => contactHelper.getIsMyContact(contact) === true || contactHelper.getIsMe(contact) === true).map((contact) => window.ZAPiX._serializeContactObj(contact));
};

window.ZAPiX._getAllChats = function () {
    return chatCollection._models.map((chat) => window.ZAPiX._serializeChatObj(chat));
};

window.ZAPiX._internal_start = async function(){
	window.ZAPiX._statusTextnode.data = "Extracting User Account...";
	var userAccount = contactCollection.getMeContact(); //await userAccountData.getMe();
	window.ZAPiX._statusTextnode.data = "Extracting User Contacts...";
	var contacts = await window.ZAPiX._getUserContacts();
	window.ZAPiX._statusTextnode.data = "Saving User Account...";
    addFile2Zip("userAccount.json", [blobfy(userAccount),{ level:9}]); 
	console.log('User account - Ok');
	window.ZAPiX._statusTextnode.data = "Saving User Contacts...";
    addFile2Zip("contacts.json", [blobfy(contacts), {level:9}]);

    console.log('User contacts - Ok');
	window.ZAPiX._statusTextnode.data = "Extracting User (recent) Chats...";
	var chats = await window.ZAPiX._getAllChats();
	window.ZAPiX._statusTextnode.data = "Saving User Chats...";
    addFile2Zip("chats.json", [blobfy(chats),{level:9}]);
    
    console.log('User chats - Ok');
	window.ZAPiX._statusTextnode.data = "Extracting Profile Pics...";
	console.log('Download Profiles Pics');
	try{
		await window.ZAPiX._getProfilesPics(contacts);
	}
	catch(e){
		console.log('Error extracting profilePics');
	}
	window.ZAPiX._statusTextnode.data = "Account, Contact and ProfilePic data collected";
}

window.ZAPiX._internal_saveAttachmentPreview = function(msg){
	try{
		var blob;
        console.log(msg);
        if (msgHelper.getBody(msg)!=''){
            console.log(msgHelper.getBody(msg))
            console.log('call b64toBlob')
            blob = b64toBlob(msgHelper.getBody(msg));
            console.log('end call b64toBlob')
        }
		var mimetypeFileExtension = window.ZAPiX._fileExtensions[msgHelper.getMimetype(msg)];
		if (msg['type']=='vcard'){
			mimetypeFileExtension = window.ZAPiX._fileExtensions['text/x-vcard'];
		}else{
			//blob = msgHelper.getMediadatamsg['mediaData']['fullPreviewData']['_blob'];
			mimetypeFileExtension = window.ZAPiX._fileExtensions[msg['mimetype']]+window.ZAPiX._fileExtensions[msg['mediaData']['fullPreviewData']['_mimetype']];
		}
		//window.ZAPiX._zip.addFile(blob, {filename: stringToByteArray('Attachment '+msg['id']+'.embedded'+mimetypeFileExtension)});
		console.log('Attachment '+msg['id']+'.embedded'+mimetypeFileExtension);
        addFile2Zip('Attachment '+msg['id']+'.embedded'+mimetypeFileExtension, blob);
		console.log("Saved ");
	}catch(e){
		console.log("NOT saved - "+e.message);
	}
}

window.ZAPiX._internal_getallchats = async function (){
    var chats = chatCollection._models;
	var chatCount = chats.length;
	window.ZAPiX._statusTextnode.data = "Extracting User Chat Messages and attachments...";
	console.log('Getting messages from:'+chatCount+' chats');
	for (var i = 0; i < chatCount; i++) {
		chatName = chats[i].__x_formattedTitle;
		var msgs = chats[i].msgs._models;
		addFile2Zip('Chat '+chats[i].__x_id+'.json', [blobfy(msgs),{ level:9}]);
        chatName = chats[i].__x_formattedTitle; 
		for (var m=0; m < msgs.length; m++){
			window.ZAPiX._statusTextnode.data = "Chat "+chatName+"-"+i+"/"+chatCount+" - Message "+m+"/"+msgs.length;
		
			msgType = msgHelper.getType(msgs[m]);
			if (msgType=='image' || msgType=='video' || msgType=='ptt' || msgType=='document' || msgType=='sticker'){
				try{
					await window.ZAPiX._downloadMediaFile(msgs[m]);
				}catch(e){
					console.log('Error downloading '+msgType+':'+e.message+". Using embedded data.");
					//window.ZAPiX._internal_saveAttachmentPreview(msgs[m])
				}
			} 
			else if (msgType=='vcard'){
				try{
					mimetypeFileExtension = window.ZAPiX._fileExtensions['text/x-vcard'];
					addFile2Zip('Attachment '+msgHelper.getId(msgs[m])+'.embedded'+mimetypeFileExtension, [msgHelper.getBody(msgs[m]),{ level:9}]);
					console.log("Vcard Saved ");
				}catch(e){
					console.log("Vcard NOT saved - "+e.message);
				}
			}
		}
		window.ZAPiX._statusTextnode.data = "Chat "+chatName+" extracted";
	}
	window.ZAPiX._statusTextnode.data = chatCount+" chats extracted";
}
	
window.ZAPiX._decodeHtmlEntities = function(str) {
    return str.replace(/&amp;/g, '&')
              .replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>')
              .replace(/&quot;/g, '"')
              .replace(/&#39;/g, "'");
}

window.ZAPiX._internal_getChatByName = function(chatName){
	ret = null
	chatName = window.ZAPiX._decodeHtmlEntities(chatName).trimStart().trimEnd();
	var chats = window.ZAPiX._getAllChats();
	for (var i = 0; i < chats.length; i++) {
		//console.log(chats[i].formattedTitle);
		if ((chats[i].isGroup && chats[i].name == chatName)||(!chats[i].isGroup && chats[i].formattedTitle == chatName)||(!chats[i].isGroup && chats[i].contact.name == chatName)){
			console.log("Found:"+chats[i].name)
			ret =  chats[i]
			break;
		}
	}
	return ret;
}

window.ZAPiX._internal_getchat = async function (chatName){
	window.ZAPiX._statusTextnode.data = "Extracting User Chat "+chatName+" messages and attachments...";
	console.log('Getting messages from:'+chatName+' chats');
	chat = window.ZAPiX._internal_getChatByName(chatName);
	if (chat == null){
		console.log('Chat:'+chatName+' not found.');
		window.ZAPiX._statusTextnode.data = 'Chat:'+chatName+' not found.';
		return;
	}
	console.log('Getting messages from:'+chat.id+' chats');
    resultOfFiltering = chatCollection._models.filter((c)=>c.__x_id._serialized === chat.id)
    if (resultOfFiltering.length > 0){
        var msgs = resultOfFiltering[0].msgs._models;
        //console.log(msgs);
        addFile2Zip('Chat '+chat.id+'.json', [blobfy(msgs),{ level:9}]); 
		for (var m=0; m < msgs.length; m++){
            msgType = msgHelper.getType(msgs[m]);
            console.log(msgType);
			if (msgType=='image' || msgType=='video' || msgType=='ptt' || msgType=='document' || msgType=='sticker'){
				try{
					await window.ZAPiX._downloadMediaFile(msgs[m]);
				}catch(e){
					console.log('Error downloading '+msgType+':'+e.message+". Using embedded data.");
					//window.ZAPiX._internal_saveAttachmentPreview(msgs[m])
				}
			} 
			else if (msgType=='vcard'){
				try{
					mimetypeFileExtension = window.ZAPiX._fileExtensions['text/x-vcard'];
					addFile2Zip('Attachment '+msgHelper.getId(msgs[m])+'.embedded'+mimetypeFileExtension, msgHelper.getBody(msgs[m]));
					console.log("Vcard Saved ");
				}catch(e){
					console.log("Vcard NOT saved - "+e.message);
				}
			}
		}
    	window.ZAPiX._statusTextnode.data = chatName+" extracted!";
    }
}
async function saveFile(dataFile, fileName) {
	if (!(dataFile instanceof Blob)){
		dataFile = new Blob([dataFile], {type:'text/plain'});
	}
	const opts = {
	suggestedName: fileName
	};
	const newHandle = await window.showSaveFilePicker(opts);
	const options = {};
	options.mode = 'readwrite';
	await newHandle.requestPermission(options);
	const writableStream = await newHandle.createWritable();
	await writableStream.write(dataFile);
	await writableStream.close();
}


window.ZAPiX.showDigest = function(){
	var hashHex = window.ZAPiX._lastDigest;
	if (hashHex!=undefined){
		var userAccount = window.ZAPiX._getUser();
		var content = hashHex +" ?SHA512*"+ "ZAPiXWEB_"+userAccount+".zip";
		saveFile(content, "ZAPiXWEB_"+userAccount+".sha512.txt");
		//var hashFile = new File([(content)],userAccount+".sha512.txt", {type: "text/plain;charset=utf-8"});
		/*if (isElectron()){
			saveAsElectron(content, "hash");
		} else {
			saveFile(userAccount+".sha512.txt", content);
		}*/
	}

}

window.ZAPiX._internal_end = async function (){
	var userAccount = window.ZAPiX._getUser();
    var fileName = "ZAPiXWEB_"+userAccount+".zip";
    var zip = await fflate.zipSync(window.ZAPiX._zipFiles);
    var blobzip = new Blob([zip], { type: 'application/zip' });
    await saveFile(blobzip,fileName);
	window.ZAPiX._statusTextnode.data = "Extracted data saved.";
	window.ZAPiX._statusTextnode.data = "Calculating hash";
	const hashBuffer = await crypto.subtle.digest('SHA-512',new Uint8Array(zip));
	const hashArray = Array.from(new Uint8Array(hashBuffer));
	// convert buffer to byte array
	window.ZAPiX._lastDigest = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); 
	if (!isElectron())
		window.ZAPiX.showDigest();
	
	window.ZAPiX._statusTextnode.data = "Extracted data saved.";
}

window.ZAPiX._clearUI = function (){
	var uiElements = document.getElementById('zapixweb_header_div');
	while (uiElements!=null){
		uiElements.remove();
		uiElements = document.getElementById('zapixweb_header_div');
	}
}

window.ZAPiX._bootstrap = function(){
	// BOOTSTRAP
	console.clear();
	window.ZAPiX._clearUI();
	console.log(window.ZAPiX._zapix_header);
	console.log('Please wait.Save the file after extraction.');
	var zapixweb_html = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_|_|	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|&nbsp;&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|	<br>&nbsp;&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|_|	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZAPiX Web<br>W&nbsp;H&nbsp;A&nbsp;T&nbsp;S&nbsp;A&nbsp;P&nbsp;P&nbsp;W&nbsp;E&nbsp;B&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;X&nbsp;T&nbsp;R&nbsp;A&nbsp;C&nbsp;T&nbsp;O&nbsp;R<br><br>';
	zapixweb_html += '<div id="zapixweb_status">Starting...</div>';
	alert('     _|_|_|   _|_|_|     |_|_|	\n    _|        _|  _|       _|	\n      _|_|    _|_|_|       _|	\n         _|   _|           _|	\n    _|_|_|    _|         _|_|_|	\n	                      ZAPiX Web\nW H A T S A P P W E B  E X T R A C T O R\n Follow the instruction in console window.');
	
	window.ZAPiX._injectedHeaderNode = document.createElement("DIV");
	window.ZAPiX._injectedHeaderNode.id = 'zapixweb_header_div'
	window.ZAPiX._injectedHeaderNode.setAttribute('align','middle');
	window.ZAPiX._injectedHeaderNode.innerHTML = '<img src="data:image/png;base64,'+window.ZAPiX._logo+'" alt="ZAPIXWEB LOGO" />'
	//var headerTextnode = document.createTextNode('Z A P i X W E B');
	//headerTextnode.id = 'zapixweb_header'
	//window.ZAPiX._injectedHeaderNode.appendChild(headerTextnode); 
	document.getElementById("pane-side").previousSibling.appendChild(window.ZAPiX._injectedHeaderNode);
	

	window.ZAPiX._mainMenu = document.createElement("DIV");
	window.ZAPiX._mainMenu.setAttribute("class","app-wrapper-web");
	window.ZAPiX._mainMenu.setAttribute('align','middle');
	window.ZAPiX._mainMenu.id = 'zapixweb_menu_div'
	
	//var style = document.createElement('style');
	//style.innerHTML = '{border: none;padding: 7px 26px;text-align: center;color: white;background: #dc3545;border-radius: 40px;}';
	var s = 'width: 100%;border: 1px solid black;padding: 1px 26px;text-align: left;color: white;background: forestgreen;border-radius: 40px;';
	var s2 = 'width: 100%;border: 1px solid black;padding: 1px 26px;text-align: left;color: white;background: darkgreen;border-radius: 40px;';
	//document.head.appendChild(style);
	window.ZAPiX._mainMenu.innerHTML = "MENU</br> <button id='zapixGetCurrentChatButton' title='Add the current selected chat in export list.' style='"+s+"'>ADD CURRENT CHAT</button></br><button  title='Add ALL chats into the export list.' id='zapixGetAllChatsButton' style='"+s+"'>GET ALL CHATS</button></br><button id='zapixTakeoutButton' title='Pack all data into ZIP file.' style='"+s+"'>TAKEOUT</button></br><button id='zapixShowDigestButton' title='Show the last calculated digest' style='"+s+"'>LAST DIGEST</button></br><button id='zapixCloseButton' title='Exit ZAPiXWEB' style='"+s2+"'>CLOSE</button></br>"
	//window.ZAPiX.getchat(this)
    window.ZAPiX._mainMenu.getElementsByTagName("button").namedItem("zapixGetCurrentChatButton").addEventListener("click", function(){window.ZAPiX.getchat(this)});
    window.ZAPiX._mainMenu.getElementsByTagName("button").namedItem("zapixGetAllChatsButton").addEventListener("click", function(){window.ZAPiX.getall(this)});
    window.ZAPiX._mainMenu.getElementsByTagName("button").namedItem("zapixTakeoutButton").addEventListener("click", function(){window.ZAPiX.takeout(this)});
    window.ZAPiX._mainMenu.getElementsByTagName("button").namedItem("zapixShowDigestButton").addEventListener("click", function(){window.ZAPiX.showDigest(this)});
    window.ZAPiX._mainMenu.getElementsByTagName("button").namedItem("zapixCloseButton").addEventListener("click", function(){window.ZAPiX.closeUI(this)});
    
    window.ZAPiX._injectedHeaderNode.appendChild(window.ZAPiX._mainMenu);
	
	window.ZAPiX._injectedStatusNode = document.createElement("DIV");
	window.ZAPiX._injectedStatusNode.id = 'zapixweb_status_div'
	window.ZAPiX._injectedStatusNode.setAttribute('align','middle');
	window.ZAPiX._injectedStatusNode.setAttribute('style','font-size:12px; border: 1px solid green');

	window.ZAPiX._statusTextnode = document.createTextNode('Starting...');
	window.ZAPiX._statusTextnode.id = 'zapixweb_status';
	window.ZAPiX._injectedStatusNode.appendChild(window.ZAPiX._statusTextnode); 
	//document.getElementById("pane-side").previousSibling.appendChild(window.ZAPiX._injectedStatusNode);
	window.ZAPiX._injectedHeaderNode.appendChild(window.ZAPiX._injectedStatusNode);
	
	window.ZAPiX._internal_start()
	
	console.log(window.ZAPiX._zapix_header);
	//console.log('To extract all chats, click GETALL');
	//console.log('To extract specific chat, open the chat windows , and click GETCHAT');
	//console.log('You can repeate this last command selecting another chat windows. You can extract as many chats as you want');

	window.ZAPiX._statusTextnode.data = "ZAPiX choose type your operation in menu";
}

window.ZAPiX.getall = function (btn){
	btn.style.background = 'darkgreen';
	window.ZAPiX._internal_getallchats();
	btn.style.background = 'forestgreen';
	window.ZAPiX._statusTextnode.data = "All User Chat Messages and attachments extracted";
	console.log(window.ZAPiX._zapix_header);
	console.log(window.ZAPiX._statusTextnode.data);
}

window.ZAPiX.getchat = function (btn){
	if (document.getElementById("main") == null){
		alert('     _|_|_|   _|_|_|     |_|_|	\n    _|        _|  _|       _|	\n      _|_|    _|_|_|       _|	\n         _|   _|           _|	\n    _|_|_|    _|         _|_|_|	\n	                      ZAPiX Web\nW H A T S A P P W E B  E X T R A C T O R\n Before execute command, select a chat do extract data. Open chat clicking the mouse over it.');
		
		console.log('Before execute command, select a chat do extract data. Open chat clicking the mouse over it.');
		return;
	}
	btn.style.background = 'darkgreen';
	spanIndex = 0;
	var chatTitle = document.getElementById("main").getElementsByTagName('span')[spanIndex];
	while (chatTitle.dir != 'auto'){
		chatTitle = document.getElementById("main").getElementsByTagName('span')[++spanIndex];
	}
	console.log(document.getElementById("main").getElementsByTagName('span')[spanIndex].title)
	chatName=document.getElementById("main").getElementsByTagName('span')[spanIndex].title;
	
	if (chatName=='' ){
		chatName=document.getElementById("main").getElementsByTagName('span')[spanIndex].innerHTML
	}
	//window.ZAPiX._internal_getchat(document.getElementById("main").getElementsByTagName('span')[spanIndex].title)
	window.ZAPiX._internal_getchat(chatName)
	btn.style.background = 'forestgreen';

	console.log(window.ZAPiX._zapix_header);
	console.log('To extract specific chat, open the chat windows , and click GET CURRENT CHAT');
	console.log('You can repeate this last command selecting another chat windows. You can extract as many chats as you want');
	console.log('To FINISH click TAKEOUT');
}

window.ZAPiX.takeout = function (btn){
	console.clear();
	console.log(window.ZAPiX._zapix_header);
	console.log('Generating export file. Wait the file dialog. It can take several minutes.');
	window.ZAPiX._statusTextnode.data = "Packing takeout.. (Please wait save file dialog) - Save It.";
	console.log('After file saved, wait for HASH digest!!!!!!. Wait.');
	btn.style.background = 'darkgreen';
	window.ZAPiX._internal_end();
	btn.style.background = 'forestgreen';
	window.ZAPiX._clearUI();
	console.clear();
	console.log(window.ZAPiX._zapix_header);
	console.log('A ZIP file and a SHA512 hash are beeing generated. It can take several minutes.');
	console.log('WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!WAIT!');
	console.log('Have a nice forensics!');
}
window.ZAPiX.closeUI = function (btn){
	if (confirm('Z A P i X W E B \n Do you really want to exit?')){
		console.clear();
		btn.style.background = 'darkgreen';
		window.ZAPiX._clearUI();
		btn.style.background = 'forestgreen';
		console.log('Close this console window (most browsers hit F12)');
		console.clear();
	}
}

window.ZAPiX._bootstrap();

//PRESS ENTER KEY NOW TO EXECUTE THIS SCRIPT!!!!!
